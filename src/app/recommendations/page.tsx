'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import Image from 'next/image'

interface Book {
  _id: string
  title: string
  author: string
  description: string
  coverImage?: string
  genres: string[]
  readingLevel: number
  kanjiLevel: string
  keywords: string[]
  isFiction: boolean
  difficulty: string
}

interface Recommendation {
  book: Book
  score: number
  reason: string
  category: 'exact-match-fiction' | 'exact-match-non-fiction' | 'expansion-fiction' | 'expansion-non-fiction' | 'random'
  matchedKeywords: string[]
}

interface RecommendationResponse {
  success: boolean
  message: string
  recommendations: Recommendation[]
  metadata: {
    totalBooks: number
    recommendedCount: number
    distribution: {
      exactMatchFiction: number
      exactMatchNonFiction: number
      expansionFiction: number
      expansionNonFiction: number
      random: number
    }
    userProfile: {
      kanjiLevel: number
      readingLevel: number
      selectedGenres: string[]
      extractedKeywords: string[]
    }
  }
}

export default function RecommendationsPage() {
  const router = useRouter()
  const [recommendations, setRecommendations] = useState<Recommendation[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState('')
  const [selectedBook, setSelectedBook] = useState<Recommendation | null>(null)
  const [isModalOpen, setIsModalOpen] = useState(false)

  useEffect(() => {
    const fetchRecommendations = async () => {
      try {
        // localStorage„Åã„Çâ„Éá„Éº„Çø„ÇíÂèñÂæó
        const kanjiTestResult = localStorage.getItem('kanjiTestResult')
        const readingTestResult = localStorage.getItem('readingTestResult')
        const genreSelection = localStorage.getItem('genreSelection')
        const extractedKeywords = localStorage.getItem('extractedKeywords')
        
        let kanjiLevel = '‰∏≠Â≠¶Âπ¥'  // „Éá„Éï„Ç©„É´„ÉàÂÄ§ÔºàÊñáÂ≠óÂàóÔºâ
        let readingLevel = 2  // „Éá„Éï„Ç©„É´„ÉàÂÄ§
        let selectedGenres = ['fantasy']  // „Éá„Éï„Ç©„É´„ÉàÂÄ§
        let userKeywords = ['ÂèãÊÉÖ', 'ÂÜíÈô∫', 'Â≠¶Ê†°']  // „Éá„Éï„Ç©„É´„ÉàÂÄ§
        
        if (kanjiTestResult) {
          try {
            const kanjiData = JSON.parse(kanjiTestResult)
            // Êñ∞„Åó„ÅÑÂΩ¢Âºè„Åß„ÅØ kanjiLevel „Ç≠„Éº„Çí‰ΩøÁî®
            if (kanjiData.kanjiLevel) {
              kanjiLevel = kanjiData.kanjiLevel
            }
            // Âè§„ÅÑÂΩ¢Âºè„Å∏„ÅÆÂØæÂøú
            else if (kanjiData.level) {
              kanjiLevel = kanjiData.level
            }
          } catch (error) {
            console.error('Failed to parse kanjiTestResult:', error)
          }
        }
        
        if (readingTestResult) {
          try {
            const readingData = JSON.parse(readingTestResult)
            // readingLevel „Ç≠„Éº„Çí‰ΩøÁî®
            if (readingData.readingLevel) {
              readingLevel = readingData.readingLevel
            }
            // Âè§„ÅÑÂΩ¢Âºè„Å∏„ÅÆÂØæÂøú
            else if (readingData.level) {
              readingLevel = readingData.level
            }
          } catch (error) {
            console.error('Failed to parse readingTestResult:', error)
          }
        }
        
        if (genreSelection) {
          try {
            selectedGenres = JSON.parse(genreSelection)
          } catch (error) {
            console.error('Failed to parse genreSelection:', error)
          }
        }
        
        if (extractedKeywords) {
          try {
            userKeywords = JSON.parse(extractedKeywords)
          } catch (error) {
            console.error('Failed to parse extractedKeywords:', error)
          }
        }
        
        // Êñ∞„Åó„ÅÑAPI„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„Åß„É™„ÇØ„Ç®„Çπ„Éà
        const response = await fetch('/api/recommendations', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            kanjiLevel,
            readingLevel,
            selectedGenres,
            userKeywords
          })
        })
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`)
        }
        
        const data: RecommendationResponse = await response.json()
        
        if (data.success) {
          setRecommendations(data.recommendations)
        } else {
          setError(data.message || 'Êé®Ëñ¶„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü')
          console.error('Failed to fetch recommendations:', data)
        }
      } catch (error) {
        setError('Êé®Ëñ¶„ÅÆÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü')
        console.error('Error fetching recommendations:', error)
      } finally {
        setIsLoading(false)
      }
    }

    fetchRecommendations()
  }, [])

  // „Ç∏„É£„É≥„É´„ÇíËã±Ë™û„Åã„ÇâÊó•Êú¨Ë™û„Å´Â§âÊèõ
  const translateGenre = (englishGenre: string): string => {
    const genreTranslation: Record<string, string> = {
      'fantasy': '„Éï„Ç°„É≥„Çø„Ç∏„Éº',
      'science': 'ÁßëÂ≠¶',
      'history': 'Ê≠¥Âè≤',
      'mystery': '„Éü„Çπ„ÉÜ„É™„Éº',
      'slice-of-life': 'Êó•Â∏∏',
      'adventure': 'ÂÜíÈô∫',
      'comedy': '„Ç≥„É°„Éá„Ç£',
      'romance': '„É≠„Éû„É≥„Çπ',
      'horror': '„Éõ„É©„Éº',
      'biography': '‰ºùË®ò',
      'education': 'ÊïôËÇ≤',
      'art': '„Ç¢„Éº„Éà'
    }
    
    return genreTranslation[englishGenre] || englishGenre
  }

  // Â≠ê‰æõÂêë„Åë„ÅÆÊé®Ëñ¶ÁêÜÁî±„ÇíÁîüÊàê
  const getFriendlyRecommendationReason = (recommendation: Recommendation) => {
    const { category, matchedKeywords, book } = recommendation
    
    // „Éû„ÉÉ„ÉÅ„Åó„Åü„Ç≠„Éº„ÉØ„Éº„Éâ„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„Åù„Çå„Çí‰ΩøÁî®
    const hasKeywords = matchedKeywords && matchedKeywords.length > 0
    const firstKeyword = hasKeywords ? matchedKeywords[0] : ''
    
    // „Ç∏„É£„É≥„É´ÊÉÖÂ†±„ÇíÂèñÂæó„Åó„Å¶Êó•Êú¨Ë™û„Å´Â§âÊèõ
    const genres = book.genres || []
    const firstGenre = genres.length > 0 ? translateGenre(genres[0]) : ''
    
    switch (category) {
      case 'exact-match-fiction':
        if (firstKeyword) {
          return `${firstKeyword}„ÅåÂ•Ω„Åç„Å™„ÅÇ„Å™„Åü„Å´„Å¥„Å£„Åü„Çä„ÅÆÊú¨„Å†„ÇàÔºÅ„Åç„Å£„Å®Ê•Ω„Åó„ÇÅ„Çã„ÅØ„Åö‚ú®`
        } else if (firstGenre) {
          return `${firstGenre}„ÅåÂ•Ω„Åç„Å™„ÅÇ„Å™„Åü„Å´„Å¥„Å£„Åü„Çä„ÅÆÊú¨„Å†„ÇàÔºÅ„Åç„Å£„Å®Ê•Ω„Åó„ÇÅ„Çã„ÅØ„Åö‚ú®`
        }
        return '„ÅÇ„Å™„Åü„ÅÆÂ•Ω„Åø„Å´„Å¥„Å£„Åü„Çä„ÅÆÊú¨„Å†„ÇàÔºÅ„Åç„Å£„Å®Ê•Ω„Åó„ÇÅ„Çã„ÅØ„Åö‚ú®'
      
      case 'exact-match-non-fiction':
        if (firstKeyword) {
          return `${firstKeyword}„Å´„Å§„ÅÑ„Å¶Ë©≥„Åó„ÅèÁü•„Çå„ÇãÊú¨„Å†„ÇàÔºÅÊñ∞„Åó„ÅÑ„Åì„Å®„Åå„Åü„Åè„Åï„ÇìÂ≠¶„Åπ„Çã„Çàüìö`
        } else if (firstGenre) {
          return `${firstGenre}„Å´„Å§„ÅÑ„Å¶Ë©≥„Åó„ÅèÁü•„Çå„ÇãÊú¨„Å†„ÇàÔºÅÊñ∞„Åó„ÅÑ„Åì„Å®„Åå„Åü„Åè„Åï„ÇìÂ≠¶„Åπ„Çã„Çàüìö`
        }
        return '„ÅÇ„Å™„Åü„ÅÆËààÂë≥„Å´„Å¥„Å£„Åü„Çä„ÅÆÊú¨„Å†„ÇàÔºÅÊñ∞„Åó„ÅÑ„Åì„Å®„Åå„Åü„Åè„Åï„ÇìÂ≠¶„Åπ„Çã„Çàüìö'
      
      case 'expansion-fiction':
        if (firstGenre) {
          return `${firstGenre}„ÅÆÊú¨„ÇÇË™≠„Çì„Åß„Åø„Çã„Å®ÊÑèÂ§ñ„Å™Áô∫Ë¶ã„Åå„ÅÇ„Çã„Åã„ÇÇÔºÅÊñ∞„Åó„ÅÑ‰∏ñÁïå„Å´Âá∫‰ºö„Åà„Çã„Çàüåü`
        }
        return '„Åì„ÅÆ„Ç∏„É£„É≥„É´„ÅÆÊú¨„ÇÇË™≠„Çì„Åß„Åø„Çã„Å®ÊÑèÂ§ñ„Å™Áô∫Ë¶ã„Åå„ÅÇ„Çã„Åã„ÇÇÔºÅÊñ∞„Åó„ÅÑ‰∏ñÁïå„Å´Âá∫‰ºö„Åà„Çã„Çàüåü'
      
      case 'expansion-non-fiction':
        if (firstGenre) {
          return `${firstGenre}„ÅÆÊú¨„Å´„ÇÇ„ÉÅ„É£„É¨„É≥„Ç∏„Åó„Å¶„Åø„Çà„ÅÜÔºÅÁü•„Çâ„Å™„Åã„Å£„Åü„Åì„Å®„Åå„ÅÑ„Å£„Å±„ÅÑÂ≠¶„Åπ„Çã„Çàüîç`
        }
        return 'Êñ∞„Åó„ÅÑ„Ç∏„É£„É≥„É´„Å´„ÉÅ„É£„É¨„É≥„Ç∏„Åó„Å¶„Åø„Çà„ÅÜÔºÅÁü•„Çâ„Å™„Åã„Å£„Åü„Åì„Å®„Åå„ÅÑ„Å£„Å±„ÅÑÂ≠¶„Åπ„Çã„Çàüîç'
      
      case 'random':
        return 'ÊÄù„ÅÑ„Åå„Åë„Å™„ÅÑÁ¥†Êïµ„Å™Êú¨„Å®„ÅÆÂá∫‰ºö„ÅÑ„Å†„ÇàÔºÅË™≠„Çì„Åß„Åø„Åü„Çâ„Éè„Éû„Å£„Å°„ÇÉ„ÅÜ„Åã„ÇÇüé≤'
      
      default:
        return '„ÅÇ„Å™„Åü„Å´„Åä„Åô„Åô„ÇÅ„ÅÆÊú¨„Å†„ÇàÔºÅ'
    }
  }

  // „Ç´„Éº„ÉâË©≥Á¥∞Ë°®Á§∫„ÇíÈñã„Åè
  const openBookDetails = (recommendation: Recommendation) => {
    setSelectedBook(recommendation)
    setIsModalOpen(true)
  }

  // „É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã
  const closeModal = () => {
    setIsModalOpen(false)
    setSelectedBook(null)
  }

  // Ë©≥Á¥∞„É¢„Éº„ÉÄ„É´„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
  const BookDetailModal = () => {
    if (!selectedBook) return null

    return (
      <div className="fixed inset-0 bg-gray-900/50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-xl max-w-2xl w-full max-h-[90vh] overflow-hidden">
          <div className="max-h-[90vh] overflow-y-auto rounded-xl">
            <div className="p-6">
            {/* „É¢„Éº„ÉÄ„É´„Éò„ÉÉ„ÉÄ„Éº */}
            <div className="flex justify-between items-start mb-4">
              <h2 className="text-2xl font-bold text-gray-900">Êú¨„ÅÆË©≥Á¥∞</h2>
              <button
                onClick={closeModal}
                className="text-gray-400 hover:text-gray-600 text-2xl"
              >
                √ó
              </button>
            </div>

            {/* Êú¨„ÅÆÊÉÖÂ†± */}
            <div className="flex flex-col md:flex-row gap-6">
              {/* Ë°®Á¥ôÁîªÂÉè */}
              <div className="md:w-1/3">
                <div className="aspect-[3/4] bg-gray-200 rounded-lg flex items-center justify-center relative">
                  {selectedBook.book.coverImage ? (
                    <Image 
                      src={selectedBook.book.coverImage} 
                      alt={`${selectedBook.book.title}„ÅÆË°®Á¥ô`} 
                      fill
                      className="object-cover rounded-lg"
                    />
                  ) : (
                    <div className="text-8xl">üìö</div>
                  )}
                </div>
              </div>

              {/* Ë©≥Á¥∞ÊÉÖÂ†± */}
              <div className="md:w-2/3">
                <h3 className="text-2xl font-bold mb-2">{selectedBook.book.title}</h3>
                <p className="text-lg text-gray-600 mb-4">{selectedBook.book.author}</p>
                
                {/* „ÅÇ„Çâ„Åô„Åò */}
                <div className="mb-4">
                  <h4 className="font-bold text-lg mb-2">üìñ „ÅÇ„Çâ„Åô„Åò</h4>
                  <p className="text-gray-700 leading-relaxed">{selectedBook.book.description}</p>
                </div>

                {/* „Ç∏„É£„É≥„É´ */}
                <div className="mb-4">
                  <h4 className="font-bold text-lg mb-2">üè∑Ô∏è „Ç∏„É£„É≥„É´</h4>
                  <div className="flex flex-wrap gap-2">
                    {selectedBook.book.genres.map((genre, index) => (
                      <span key={index} className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">
                        {translateGenre(genre)}
                      </span>
                    ))}
                  </div>
                </div>

                {/* Ë™≠Êõ∏„É¨„Éô„É´ÊÉÖÂ†± */}
                <div className="mb-4">
                  <h4 className="font-bold text-lg mb-2">üìä Ë™≠Êõ∏ÊÉÖÂ†±</h4>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <span className="block text-sm text-gray-600">Ë™≠Êõ∏„É¨„Éô„É´</span>
                      <span className="font-medium">{selectedBook.book.readingLevel}</span>
                    </div>
                    <div>
                      <span className="block text-sm text-gray-600">Êº¢Â≠ó„É¨„Éô„É´</span>
                      <span className="font-medium">{selectedBook.book.kanjiLevel}</span>
                    </div>
                    <div>
                      <span className="block text-sm text-gray-600">„Ç∏„É£„É≥„É´Á®ÆÂà•</span>
                      <span className="font-medium">{selectedBook.book.isFiction ? '„Éï„Ç£„ÇØ„Ç∑„Éß„É≥' : '„Éé„É≥„Éï„Ç£„ÇØ„Ç∑„Éß„É≥'}</span>
                    </div>
                    <div>
                      <span className="block text-sm text-gray-600">Èõ£ÊòìÂ∫¶</span>
                      <span className="font-medium">{selectedBook.book.difficulty}</span>
                    </div>
                  </div>
                </div>

                {/* „Åä„Åô„Åô„ÇÅÁêÜÁî± */}
                <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-4">
                  <h4 className="font-bold text-lg mb-2">‚ú® „Åä„Åô„Åô„ÇÅÁêÜÁî±</h4>
                  <p className="text-gray-700">{getFriendlyRecommendationReason(selectedBook)}</p>
                  
                  {selectedBook.matchedKeywords && selectedBook.matchedKeywords.length > 0 && (
                    <div className="mt-3">
                      <span className="text-sm text-gray-600">„Éû„ÉÉ„ÉÅ„Åó„Åü„Ç≠„Éº„ÉØ„Éº„Éâ: </span>
                      <div className="flex flex-wrap gap-1 mt-1">
                        {selectedBook.matchedKeywords.map((keyword, index) => (
                          <span key={index} className="px-2 py-1 bg-green-100 text-green-800 rounded text-xs">
                            {keyword}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Èñâ„Åò„Çã„Éú„Çø„É≥ */}
            <div className="flex justify-center mt-6">
              <button
                onClick={closeModal}
                className="px-6 py-2 bg-gray-200 text-gray-700 rounded-lg font-medium hover:bg-gray-300 transition-colors"
              >
                Èñâ„Åò„Çã
              </button>
            </div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  const renderBookCard = (recommendation: Recommendation) => (
    <div 
      key={recommendation.book._id} 
      className="bg-white rounded-xl shadow-lg overflow-hidden transform transition-transform hover:scale-105 cursor-pointer"
      onClick={() => openBookDetails(recommendation)}
    >
      <div className="h-48 bg-gray-200 flex items-center justify-center relative">
        {recommendation.book.coverImage ? (
          <Image 
            src={recommendation.book.coverImage} 
            alt={`${recommendation.book.title}„ÅÆË°®Á¥ô`} 
            fill
            className="object-cover"
          />
        ) : (
          <div className="text-6xl">üìö</div>
        )}
      </div>
      
      <div className="p-4">
        <h3 className="font-bold text-xl mb-2 line-clamp-2">{recommendation.book.title}</h3>
        <p className="text-gray-600 mb-2">{recommendation.book.author}</p>
        <p className="text-sm line-clamp-3 mb-4">{recommendation.book.description}</p>
        
        {/* Êé®Ëñ¶ÁêÜÁî± */}
        <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-3 mb-3">
          <p className="text-sm text-gray-700">
            <span className="font-medium">üìù „Åä„Åô„Åô„ÇÅÁêÜÁî±:</span> {getFriendlyRecommendationReason(recommendation)}
          </p>
        </div>
      </div>
    </div>
  )

  if (isLoading) {
    return (
      <div className="relative flex size-full min-h-screen flex-col bg-white" style={{fontFamily: 'Lexend, "Noto Sans", sans-serif'}}>
        <div className="layout-container flex h-full grow flex-col">
          <header className="flex items-center justify-between whitespace-nowrap border-b border-solid border-b-[#f0f3f4] px-10 py-3">
            <div className="flex items-center gap-4 text-[#111518]">
              <div className="size-4">
                <svg viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path
                    fillRule="evenodd"
                    clipRule="evenodd"
                    d="M39.475 21.6262C40.358 21.4363 40.6863 21.5589 40.7581 21.5934C40.7876 21.655 40.8547 21.857 40.8082 22.3336C40.7408 23.0255 40.4502 24.0046 39.8572 25.2301C38.6799 27.6631 36.5085 30.6631 33.5858 33.5858C30.6631 36.5085 27.6632 38.6799 25.2301 39.8572C24.0046 40.4502 23.0255 40.7407 22.3336 40.8082C21.8571 40.8547 21.6551 40.7875 21.5934 40.7581C21.5589 40.6863 21.4363 40.358 21.6262 39.475C21.8562 38.4054 22.4689 36.9657 23.5038 35.2817C24.7575 33.2417 26.5497 30.9744 28.7621 28.762C30.9744 26.5497 33.2417 24.7574 35.2817 23.5037C36.9657 22.4689 38.4054 21.8562 39.475 21.6262ZM4.41189 29.2403L18.7597 43.5881C19.8813 44.7097 21.4027 44.9179 22.7217 44.7893C24.0585 44.659 25.5148 44.1631 26.9723 43.4579C29.9052 42.0387 33.2618 39.5667 36.4142 36.4142C39.5667 33.2618 42.0387 29.9052 43.4579 26.9723C44.1631 25.5148 44.659 24.0585 44.7893 22.7217C44.9179 21.4027 44.7097 19.8813 43.5881 18.7597L29.2403 4.41187C27.8527 3.02428 25.8765 3.02573 24.2861 3.36776C22.6081 3.72863 20.7334 4.58419 18.8396 5.74801C16.4978 7.18716 13.9881 9.18353 11.5858 11.5858C9.18354 13.988 7.18717 16.4978 5.74802 18.8396C4.58421 20.7334 3.72865 22.6081 3.36778 24.2861C3.02574 25.8765 3.02429 27.8527 4.41189 29.2403Z"
                    fill="currentColor"
                  />
                </svg>
              </div>
              <h2 className="text-[#111518] text-lg font-bold leading-tight tracking-[-0.015em]">EduSelect</h2>
            </div>
            <div>
              <button
                onClick={() => router.push('/')}
                className="flex items-center text-gray-600 hover:text-gray-900"
              >
                <span className="mr-1">„Éõ„Éº„É†</span>
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                  <polyline points="9 22 9 12 15 12 15 22"></polyline>
                </svg>
              </button>
            </div>
          </header>
          
          <div className="flex flex-1 justify-center items-center">
            <div className="flex flex-col items-center">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#47b4ea]"></div>
              <p className="mt-4 text-[#637c88]">„ÅÇ„Å™„Åü„Å´„Å¥„Å£„Åü„Çä„ÅÆÊú¨„ÇíÊé¢„Åó„Å¶„ÅÑ„Åæ„Åô...</p>
            </div>
          </div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="relative flex size-full min-h-screen flex-col bg-white" style={{fontFamily: 'Lexend, "Noto Sans", sans-serif'}}>
        <div className="layout-container flex h-full grow flex-col">
          <header className="flex items-center justify-between whitespace-nowrap border-b border-solid border-b-[#f0f3f4] px-10 py-3">
            <div className="flex items-center gap-4 text-[#111518]">
              <div className="size-4">
                <svg viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path
                    fillRule="evenodd"
                    clipRule="evenodd"
                    d="M39.475 21.6262C40.358 21.4363 40.6863 21.5589 40.7581 21.5934C40.7876 21.655 40.8547 21.857 40.8082 22.3336C40.7408 23.0255 40.4502 24.0046 39.8572 25.2301C38.6799 27.6631 36.5085 30.6631 33.5858 33.5858C30.6631 36.5085 27.6632 38.6799 25.2301 39.8572C24.0046 40.4502 23.0255 40.7407 22.3336 40.8082C21.8571 40.8547 21.6551 40.7875 21.5934 40.7581C21.5589 40.6863 21.4363 40.358 21.6262 39.475C21.8562 38.4054 22.4689 36.9657 23.5038 35.2817C24.7575 33.2417 26.5497 30.9744 28.7621 28.762C30.9744 26.5497 33.2417 24.7574 35.2817 23.5037C36.9657 22.4689 38.4054 21.8562 39.475 21.6262ZM4.41189 29.2403L18.7597 43.5881C19.8813 44.7097 21.4027 44.9179 22.7217 44.7893C24.0585 44.659 25.5148 44.1631 26.9723 43.4579C29.9052 42.0387 33.2618 39.5667 36.4142 36.4142C39.5667 33.2618 42.0387 29.9052 43.4579 26.9723C44.1631 25.5148 44.659 24.0585 44.7893 22.7217C44.9179 21.4027 44.7097 19.8813 43.5881 18.7597L29.2403 4.41187C27.8527 3.02428 25.8765 3.02573 24.2861 3.36776C22.6081 3.72863 20.7334 4.58419 18.8396 5.74801C16.4978 7.18716 13.9881 9.18353 11.5858 11.5858C9.18354 13.988 7.18717 16.4978 5.74802 18.8396C4.58421 20.7334 3.72865 22.6081 3.36778 24.2861C3.02574 25.8765 3.02429 27.8527 4.41189 29.2403Z"
                    fill="currentColor"
                  />
                </svg>
              </div>
              <h2 className="text-[#111518] text-lg font-bold leading-tight tracking-[-0.015em]">EduSelect</h2>
            </div>
            <div>
              <button
                onClick={() => router.push('/')}
                className="flex items-center text-gray-600 hover:text-gray-900"
              >
                <span className="mr-1">„Éõ„Éº„É†</span>
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                  <polyline points="9 22 9 12 15 12 15 22"></polyline>
                </svg>
              </button>
            </div>
          </header>
          
          <div className="flex flex-1 justify-center items-center">
            <div className="flex flex-col items-center">
              <div className="text-4xl mb-4">üò¢</div>
              <p className="text-[#637c88] mb-4">{error}</p>
              <button
                onClick={() => router.push('/genre-selection')}
                className="px-4 py-2 bg-[#47b4ea] text-white rounded-lg"
              >
                ÊúÄÂàù„Åã„Çâ„ÇÑ„ÇäÁõ¥„Åô
              </button>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="relative flex size-full min-h-screen flex-col bg-white" style={{fontFamily: 'Lexend, "Noto Sans", sans-serif'}}>
      <div className="layout-container flex h-full grow flex-col">
        <header className="flex items-center justify-between whitespace-nowrap border-b border-solid border-b-[#f0f3f4] px-10 py-3">
          <div className="flex items-center gap-4 text-[#111518]">
            <div className="size-4">
              <svg viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M39.475 21.6262C40.358 21.4363 40.6863 21.5589 40.7581 21.5934C40.7876 21.655 40.8547 21.857 40.8082 22.3336C40.7408 23.0255 40.4502 24.0046 39.8572 25.2301C38.6799 27.6631 36.5085 30.6631 33.5858 33.5858C30.6631 36.5085 27.6632 38.6799 25.2301 39.8572C24.0046 40.4502 23.0255 40.7407 22.3336 40.8082C21.8571 40.8547 21.6551 40.7875 21.5934 40.7581C21.5589 40.6863 21.4363 40.358 21.6262 39.475C21.8562 38.4054 22.4689 36.9657 23.5038 35.2817C24.7575 33.2417 26.5497 30.9744 28.7621 28.762C30.9744 26.5497 33.2417 24.7574 35.2817 23.5037C36.9657 22.4689 38.4054 21.8562 39.475 21.6262ZM4.41189 29.2403L18.7597 43.5881C19.8813 44.7097 21.4027 44.9179 22.7217 44.7893C24.0585 44.659 25.5148 44.1631 26.9723 43.4579C29.9052 42.0387 33.2618 39.5667 36.4142 36.4142C39.5667 33.2618 42.0387 29.9052 43.4579 26.9723C44.1631 25.5148 44.659 24.0585 44.7893 22.7217C44.9179 21.4027 44.7097 19.8813 43.5881 18.7597L29.2403 4.41187C27.8527 3.02428 25.8765 3.02573 24.2861 3.36776C22.6081 3.72863 20.7334 4.58419 18.8396 5.74801C16.4978 7.18716 13.9881 9.18353 11.5858 11.5858C9.18354 13.988 7.18717 16.4978 5.74802 18.8396C4.58421 20.7334 3.72865 22.6081 3.36778 24.2861C3.02574 25.8765 3.02429 27.8527 4.41189 29.2403Z"
                  fill="currentColor"
                />
              </svg>
            </div>
            <h2 className="text-[#111518] text-lg font-bold leading-tight tracking-[-0.015em]">EduSelect</h2>
          </div>
          <div>
            <button
              onClick={() => router.push('/')}
              className="flex items-center text-gray-600 hover:text-gray-900"
            >
              <span className="mr-1">„Éõ„Éº„É†</span>
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                <polyline points="9 22 9 12 15 12 15 22"></polyline>
              </svg>
            </button>
          </div>
        </header>
        
        <div className="px-4 md:px-10 flex flex-1 justify-center py-5">
          <div className="layout-content-container flex flex-col max-w-[1200px] flex-1">
            {/* „Çø„Ç§„Éà„É´„Ç®„É™„Ç¢ */}
            <div className="flex flex-wrap justify-between gap-3 p-4">
              <div className="flex min-w-72 flex-col gap-3">
                <p className="text-[#111518] tracking-light text-[32px] font-bold leading-tight">‚ú® „ÅÇ„Å™„Åü„Å´„Åä„Åô„Åô„ÇÅ„ÅÆÊú¨ ‚ú®</p>
                <p className="text-[#637c88] text-sm font-normal leading-normal">
                  „ÅÇ„Å™„Åü„Å´„Å¥„Å£„Åü„Çä„ÅÆ5ÂÜä„ÇíË¶ã„Å§„Åë„Åü„ÇàÔºÅ„Å©„ÅÆÊú¨„Åã„ÇâË™≠„Çì„Åß„Åø„ÇãÔºü
                </p>
              </div>
              <div className="flex items-center">
                <button
                  onClick={() => router.push('/chat-interview')}
                  className="flex items-center text-[#47b4ea] hover:text-blue-700"
                >
                  <span>Âà•„ÅÆÊú¨„ÇÇÊé¢„Åó„Å¶„Åø„Çã</span>
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="ml-1">
                    <path d="M23 4v6h-6"></path>
                    <path d="M20.49 15a9 9 0 1 1-2.12-9.36L23 10"></path>
                  </svg>
                </button>
              </div>
            </div>
            
            {/* Êé®Ëñ¶Êõ∏Á±ç‰∏ÄË¶ß */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-6 p-4">
              {recommendations.map((recommendation) => renderBookCard(recommendation))}
            </div>
            
            <div className="flex px-4 py-6 justify-center space-x-4">
              <button
                onClick={() => router.push('/chat-interview')}
                className="px-6 py-3 bg-[#47b4ea] text-white rounded-xl font-medium hover:bg-blue-600 transition-colors"
              >
                „ÇÇ„ÅÜ‰∏ÄÂ∫¶Ë≥™Âïè„Å´Á≠î„Åà„Çã
              </button>
              <button
                onClick={() => router.push('/')}
                className="px-6 py-3 bg-gray-200 text-gray-700 rounded-xl font-medium hover:bg-gray-300 transition-colors"
              >
                „Éõ„Éº„É†„Å´Êàª„Çã
              </button>
            </div>
          </div>
        </div>
      </div>
      
      {/* „É¢„Éº„ÉÄ„É´„ÇíËøΩÂä† */}
      {isModalOpen && <BookDetailModal />}
    </div>
  )
} 